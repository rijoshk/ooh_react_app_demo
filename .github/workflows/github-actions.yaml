name: Deploy ooh demo app

on:
  push:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.OOH_GITHUB_ASSUME_ROLE }}
          aws-region: ap-southeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Format check
        run: |
          cd infra
          terraform fmt

      # - name: Terraform Validate
      #   run: |
      #     cd infra
      #     terraform validate

      # - name: Terraform Plan
      #   id: plan
      #   run: |
      #     set -o pipefail
      #     terraform plan -no-color -detailed-exitcode | tee tfplan.txt
      #     echo "exitcode=$?" >> $GITHUB_OUTPUT
      #   continue-on-error: true

      # - name: Capture Plan Exit Code
      #   id: check_plan
      #   run: |
      #     echo "exitcode=${{ steps.plan.outcome == 'success' && '0' || (steps.plan.outcome == 'failure' && '1' || '2') }}" >> $GITHUB_OUTPUT
      # - name: Comment Terraform Plan on PR (even if push to PR branch)
      #   uses: actions/github-script@v7
      #   if: (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure') && !(github.event_name == 'push' && github.ref == 'refs/heads/main')
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       // Try to find the PR related to this push (if any)
      #       const prs = await github.rest.pulls.list({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
      #         state: 'open'
      #       });
      #       if (!prs.data.length) {
      #         console.log("❌ No open PR found for this branch, skipping comment.");
      #         return;
      #       }
      #       const pr = prs.data[0]; // Use the first match (usually safe)
      #       const planOutput = fs.readFileSync('tfplan.txt', 'utf8');
      #       const summaryMatch = planOutput.match(/Plan: (\d+) to add, (\d+) to change, (\d+) to destroy./);
      #       let summary;
      #       if (summaryMatch) {
      #         summary = `\u0060\u0060\u0060\nCreate: ${summaryMatch[1]}\nUpdate: ${summaryMatch[2]}\nDelete: ${summaryMatch[3]}\n\u0060\u0060\u0060`;
      #       } else if (/No changes. Your infrastructure matches the configuration\./.test(planOutput)) {
      #         summary = '```\nCreate: 0\nUpdate: 0\nDelete: 0\n```';
      #       } else {
      #         summary = '⚠️ Could not parse summary from plan output.';
      #       }
      #       const collapsedDetails = `<details>\n<summary>Show Plan Details</summary>\n\n\u0060\u0060\u0060hcl\n${planOutput.slice(0, 60000)}\n\u0060\u0060\u0060\n</details>`;
      #       const meta = `\n\nPusher: @${context.actor}, Branch: \`${context.ref.replace('refs/heads/', '')}\`, Workflow: \`${context.workflow}\``;
      #       const body = [
      #         "## Terraform Plan Summary",
      #         summary,
      #         collapsedDetails,
      #         meta
      #       ].join("\n");
      #       await github.rest.issues.createComment({
      #         issue_number: pr.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body
      #       });

      # - name: Fail if Terraform Plan failed (syntax or auth issue)
      #   if: steps.plan.outputs.exitcode == '1'
      #   run: |
      #     echo "❌ Terraform plan failed with exit code 1"
      #     exit 1

      # - name: Terraform Apply
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve